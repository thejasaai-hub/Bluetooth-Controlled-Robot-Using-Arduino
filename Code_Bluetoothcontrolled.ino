/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled 2"
  https://create.arduino.cc/cloud/things/2c76ca2b-6a42-4e4e-826b-2158f632c0cf

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int level;
  CloudLocation location;
  bool led1;
  bool led2;
  bool led3;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Arduino_MKRGPS.h>
#include <Ultrasonic.h>

//Echo - 12, trigger - 13//
Ultrasonic ultrasonic(12, 13);

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found


  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  if (!GPS.begin()) {
    Serial.println("Failed to initialize GPS!");
    while (1);
  }
}

void loop() {
  ArduinoCloud.update();
  // Your code here
  if (GPS.available()) {
    // read GPS values
    float latitude = GPS.latitude();
    float longitude = GPS.longitude();

    // print GPS values
    Serial.print("Location: ");
    Serial.print(latitude, 7);
    Serial.print(", ");
    Serial.println(longitude, 7);
    location = {latitude, longitude};
    Serial.println();
  }
  level = ultrasonic.read();
  if (level > 50 && level < 90) {
    led1 = 1;
    led2 = 0;
    led3 = 0;

  }
  else if (level > 90 && level < 100) {
    led1 = 1;
    led2 = 1;
    led3 = 0;
  }
  else if (level >= 100) {
    led1 = 1;
    led2 = 1;
    led3 = 1;
#include <SoftwareSerial.h>
SoftwareSerial SoftSerial(2, 3);
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x3F, 16, 2);
char Incoming_value = 0;
const int M1 = 9;
const int M2 = 12;
const int M3 = 11;
const int M4 = 10;
int flag = 0, lock = 0;
void setup()
{
  lcd.begin();
  lcd.backlight();
  Serial.begin(9600);
  SoftSerial.begin(9600);
  pinMode(M1, OUTPUT);
  pinMode(M2, OUTPUT);
  pinMode(M3, OUTPUT);
  pinMode(M4, OUTPUT);
  digitalWrite(M1, HIGH);
  digitalWrite(M2, HIGH);
  digitalWrite(M3, HIGH);
  digitalWrite(M4, HIGH);
  Serial.println('k');
  lcd.setCursor(0, 0);
  lcd.print("bluetooth cont  ");
  lcd.setCursor(0, 1);
  lcd.print("                ");
}

void loop() {
  if (Serial.available() > 0)
  {
    Incoming_value = Serial.read();
    Serial.print(Incoming_value);
    if (Incoming_value == '1')
    {
      lcd.setCursor(0, 1);
      lcd.print("Forword...      ");
      Serial.println("Forword...      ");
      digitalWrite(M1, LOW);
      digitalWrite(M2, HIGH);
      digitalWrite(M3, LOW);
      digitalWrite(M4, HIGH);
    }
    else if (Incoming_value == '2')
    {
      lcd.setCursor(0, 1);
      lcd.print("Back...         ");
      Serial.println("Back...      ");
      digitalWrite(M1, HIGH);
      digitalWrite(M2, LOW);
      digitalWrite(M3, HIGH);
      digitalWrite(M4, LOW);
    }
    else if (Incoming_value == '3')
    {
      lcd.setCursor(0, 1);
      lcd.print("Right...        ");
      Serial.println("Right...      ");
      digitalWrite(M1, LOW);
      digitalWrite(M2, HIGH);
      digitalWrite(M3, HIGH);
      digitalWrite(M4, LOW);
    }
    else if (Incoming_value == '4')
    {
      lcd.setCursor(0, 1);
      lcd.print("Left...         ");
      Serial.println("Left...      ");
      digitalWrite(M1, HIGH);
      digitalWrite(M2, LOW);
      digitalWrite(M3, LOW);
      digitalWrite(M4, HIGH);
    }
    else if (Incoming_value == '5')
    {
      lcd.setCursor(0, 1);
      lcd.print("Stop...         ");
      Serial.println("Stop...      ");
      digitalWrite(M1, HIGH);
      digitalWrite(M2, HIGH);
      digitalWrite(M3, HIGH);
      digitalWrite(M4, HIGH);
    }
    Incoming_value = 0;
  }
}









